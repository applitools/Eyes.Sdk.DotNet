Option Explicit On

Dim eyes, eyesReport
Set eyes = New Eyes_
Set eyesReport = New EyesReport_

Const TOP_LEVEL_OBJECT_TYPE_UNKNOWN = 1
Const TOP_LEVEL_OBJECT_TYPE_WINDOW = 2
Const TOP_LEVEL_OBJECT_TYPE_BROWSER = 3
Const TOP_LEVEL_OBJECT_TYPE_PM_DEVICE = 4
Const TOP_LEVEL_OBJECT_TYPE_MC_DEVICE = 5

'Declare Function GetAncestor Lib "user32.dll" (ByVal hwnd As Long, ByVal gaFlags As Long) As Long
Extern.Declare micLong, "GetAncestor", "user32", "GetAncestor", micLong, micLong  

Class Eyes_

	' === Fields ===

	Private eyesPath_
	Private eyes_
	Private utils_
	Private matchLevel_
	Private topLevelObject_
	Private topLevelObjectType_
	Private logFile_
	Private hostApp_
	Private hostOS_
	Private imageFile_
	Private defaultRetryTimeout_
	Private matchOnceOnTimeout_
	Private account_
	Private width_
	Private height_

	' === Constructors ===

	Private Sub Class_Initialize()
		Dim qtp, test, libName, libPath, libsCount, i

		' Compute the eyes path
		eyesPath_ = TryGetEyesPath_()
		If IsEmpty(eyesPath_) Then
	        Set qtp = CreateObject("QuickTest.Application")
		    Set test = qtp.Test
		    libsCount = test.Settings.Resources.Libraries.Count
			libName = "Eyes.qfl"
			For i = 1 To libsCount
				libPath = test.Settings.Resources.Libraries.Item(i)
				If Right(libPath, Len(libName)) = libName Then
					eyesPath_ = Left(libPath, Len(libPath) - Len(libName))
				End If
			Next
		End If
		
	    Set eyes_ = DotNetFactory.CreateInstance("Applitools.Images.Eyes", eyesPath_ & "Eyes.Images.DotNet.dll")
	    Set utils_ = DotNetFactory.CreateInstance("Applitools.Qtp.QtpUtils", eyesPath_ & "Eyes.Qtp.DotNet.dll")	
	    imageFile_ = Environment("SystemTempDir") + "\applitools.png"
		matchLevel_ = 0
	    Set topLevelObject_ = Nothing
	    topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_UNKNOWN
		hostOS_ = Null
		hostApp_ = Null
		defaultRetryTimeout_ = 2
		width_ = -1
		height_ = -1
		eyes_.AgentId = "eyes.qtp/1.16 (UFT " & UFTVersionInRegistry() & ")"
		eyes_.InteropMatchTimeout = 0
	End Sub

	' === Properties ===

	Public Property Get ServerUrl
	    ServerUrl = eyes_.ServerUrl
    End Property

	Public Property Let ServerUrl(value)
	    eyes_.ServerUrl = value
    End Property

	Public Property Get ApiKey
	    ApiKey = eyes_.ApiKey
    End Property

	Public Property Let ApiKey(value)
	    eyes_.ApiKey = value
    End Property

	Public Property Get IsDisabled
	    IsDisabled = eyes_.IsDisabled
    End Property

	Public Property Let IsDisabled(value)
	    eyes_.IsDisabled = value
    End Property

	Public Property Get HostOS
	    HostOS = hostOS_
    End Property

	Public Property Let HostOS(value)
    	hostOs_ = value
    End Property

	Public Property Get HostApp
	    HostApp = hostApp_
    End Property

	Public Property Let HostApp(value)
    	hostApp_ = value
    End Property

	Public Property Get MatchLevel
	    MatchLevel = eyes_.MatchLevel
    End Property

	Public Property Let MatchLevel(value)
	    eyes_.InteropMatchLevel = value
    End Property

	Public Property Get LogFile
	    LogFile = logFile_
    End Property

	Public Property Let LogFile(value)
	    logFile_ = value
    End Property

	Public Property Get SaveNewTests
	    SaveNewTests = eyes_.SaveNewTests
    End Property

	Public Property Let SaveNewTests(value)
	    eyes_.SaveNewTests = value
    End Property

	Public Property Get SaveFailedTests
	    SaveFailedTests = eyes_.SaveFailedTests
    End Property

	Public Property Let SaveFailedTests(value)
	    eyes_.SaveFailedTests = value
    End Property

	Public Property Get MatchTimeout
	    MatchTimeout = defaultRetryTimeout_
    End Property

	Public Property Let MatchTimeout(value)
	    defaultRetryTimeout_ = value
    End Property

	Public Property Get BranchName
    	Branch = eyes_.BranchName
    End Property

	Public Property Let BranchName(value)
    	eyes_.BranchName = value
    End Property

	Public Property Get ParentBranchName
    	ParentBranch = eyes_.ParentBranchName
    End Property

	Public Property Let ParentBranchName(value)
    	eyes_.ParentBranchName = value
    End Property

	Public Property Get BaselineName
		BaselineName = eyes_.BaselineName
	End Property

	Public Property Let BaselineName(value)
		eyes_.BaselineName = value
	End Property

	Public Property Get MatchLayout
	    MatchLayout = 10
    End Property

	Public Property Get MatchContent
	    MatchContent = 20
    End Property

	Public Property Get MatchStrict
	    MatchStrict = 30
    End Property

	Public Property Get MatchExact
	    MatchExact = 40
    End Property

	Public Property Get MatchLayout2
		MatchLayout2 = 11
	End Property
	' === Public Methods ===

	Public Sub SetMobileCloudAccount(serverUrl, user, password)
		Set account_ = New MobileCloudAccount_
		account_.User = user
		account_.Password = password
		account_.ServerUrl = serverUrl
	End Sub

	Public Sub SetBaselineInfo(topLevelObject, hostOS, hostApp)
		If Not topLevelObject Is Nothing Then
			Set topLevelObject_ = topLevelObject
			topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_UNKNOWN
		End If

		hostOS_ = hostOS
		hostApp_ = hostApp
	End Sub

	Public Sub SetBaselineInfoFromWindow(window)
		If window Is Nothing Then
			eyes_.Throw "window must not be NULL"
		End If
		
		Set topLevelObject_ = window
		topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_WINDOW
	End Sub

	Public Sub SetBaselineInfoFromBrowser(browser, width, height)

		Dim i, j
		Dim children :  Set children = browser.ChildObjects()
		Dim props :  set props = browser.GetAllRoProperties()
		For i = 0 To props.Count - 1
			SystemUtil.PrintToDebugStream props(i).name & ": " & props(i).Value
		Next

		For i = 0 To children.Count - 1
			SystemUtil.PrintToDebugStream "child " & i
			set props = children(i).GetAllRoProperties()
			For j = 0 To props.Count - 1
				SystemUtil.PrintToDebugStream "    " & props(j).name & ": " & props(j).Value
			Next
		Next

		If (Not IsBrowserObject_(browser)) Then
			eyes_.Throw "Not a browser!"
		End If

		Set topLevelObject_ = browser
		topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_BROWSER
		width_ = width
		height_ = height
	End Sub

	Public Sub SetBaselineInfoFromDevice(device)
		If device Is Nothing Then
			eyes_.Throw "device must not be NULL"
		End If
		
		Set topLevelObject_ = device
		If device.GetROProperty("micclass") = "Device" Then
			topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_MC_DEVICE
		Else
			topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_PM_DEVICE
		End If
	End Sub

	Public Function SetBatch(id, name)
		Dim batch
		If IsNull(id) And IsNull(name) Then
			Set batch = Nothing
		Else
			Set batch = NewSdkObj_("Applitools.BatchInfo")
			If Not IsNull(id) Then
				batch.Id = id
			End If

			If Not IsNull(name) Then
				batch.Name = name
			End If
		End If

		eyes_.Batch = batch
	End Function

	Public Sub Open(appName, testName)
		Dim logHandler, viewportSize

		If Not IsNull(LogFile) And Not IsEmpty(LogFile) Then
		    Set logHandler = NewSdkObj_("Applitools.FileLogHandler")
		    logHandler.FilePath = LogFile
			eyes_.SetLogHandler(logHandler)
		End If

		If topLevelObject_ Is Nothing Then
			eyes_.Throw "Open(): No baseline info was set!"
		End If

		SetAppEnvironment_()

		Capture_ topLevelObject_

		If width_ > 0 And height_ > 0 Then
			Set viewportSize = NewSize_(width_, height_)
		Else
	    	Set viewportSize = utils_.GetImageSize(imageFile_)
	    End If

		matchOnceOnTimeout_ = False
		If eyes_.ApiKey = Empty Then
			eyes_.ApiKey = Environment.Value("APPLITOOLS_API_KEY")
		End If
		eyes_.Open appName, testName, viewportSize

		' From here onwards the log file is open!
		eyes_.Log "TopLevelObject = '" & topLevelObject_.ToString & "'"

		eyesReport.TestName = testName
		eyesReport.AppName = appName
		eyesReport.Url = Null
		eyesReport.IsPassed = Null
		eyesReport.IsNew = Null
		eyesReport.IsRunning = True
		eyesReport.Steps = Null
		eyesReport.Matches = Null
	End Sub

	Public Function CheckObject(object, tag)
		Dim logMsg, appImage

		SetTopLevelObjectSize_()

		logMsg = "CheckObject(" & Object.ToString & ", " & tag & ")"
		eyes_.Log logMsg
	
	    Set appImage = CheckImageRetry_(object, tag, -1)
	
	    If appImage.IsMatch Then
			eyes_.Log logMsg & " => Match"
		Else
			eyes_.Log logMsg & " => Mismatch"
		End If
	
	    Set CheckObject = appImage
    End Function

	Public Function CheckObjectWithTimeout(object, tag, timeout)
		Dim logMsg, appImage

		logMsg = "CheckObjectWithTimeout(" & Object.ToString & ", " & tag & ", " & timeout & ")"
		eyes_.Log logMsg
	
	    Set appImage = CheckImageRetry_(object, tag, timeout)
	
	    If appImage.IsMatch Then
			eyes_.Log logMsg & " => Match"
		Else
			eyes_.Log logMsg & " => Mismatch"
		End If
	
	    Set CheckObjectWithTimeout = appImage
    End Function

	Public Sub Close()
		Dim testResults
    	
	    Set testResults = eyes_.Close(false)
	    eyesReport.Url = testResults.Url
		eyesReport.IsPassed = testResults.IsPassed
		eyesReport.IsNew = testResults.IsNew
		eyesReport.IsRunning = False
		eyesReport.Steps = testResults.Steps
		eyesReport.Matches = testResults.Matches
	End Sub

	' === Private Methods ===

	Function GetBrowserPage_(obj)
		Select Case TypeOf_(obj)
			Case "Browser"
				Dim children :  Set children = obj.ChildObjects()
	            If children.count <> 1 Then
					eyes_.Throw "Unexpected amount of browser child objects (" & children.count & ")"
				End If
	            Set GetBrowserPage_ = children(0)
	        Case "Page"
	            Set GetBrowserPage_ = obj
	        Case Else
				eyes_.Throw "Browser object expected!"
		End Select
	End Function

	Private Function CheckImageRetry_(object, tag, retryTimeout)
		Dim start, timeout, appImage, replaceLast

		If retryTimeout < 0 Then
			retryTimeout = defaultRetryTimeout_
		End If

		eyes_.Log "CheckImageRetry_(): retryTimeout = " & retryTimeout

		If (matchOnceOnTimeout_ Or retryTimeout = 0) Then
			If retryTimeout > 0 Then
				Wait(retryTimeout)
			End If

		    Set CheckImageRetry_ = CheckImage_(object, tag, false)
		    Exit Function
		End If

		' Ignore mistmaches while timeout does not expire
		start = utils_.GetCurrentTime()
		timeout = retryTimeout * 1000
	
	    Set appImage = Nothing
	    replaceLast = False
		Do While utils_.GetCurrentTime() - start < timeout
			utils_.Sleep 500
    	    Set appImage = CheckImage_(object, tag, replaceLast)
		    If appImage.isMatch Then
				Exit Do
			End If
			replaceLast = True
		Loop

		If Not appImage.IsMatch Then
    	    ' Try one last time...
		    Set appImage = CheckImage_(object, tag, true)
	    End If

		If Not appImage.IsMatch Then
			matchOnceOnTimeout_ = True
		End If
	
	    Set CheckImageRetry_ = appImage
    End Function

	Private Function CheckImage_(object, tag, replaceLast)
		Dim imageUrl
		eyes_.Log "CheckImage_()"
		If topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_PM_DEVICE Then
			imageUrl = CaptureRemote_(Of Object)()
				    	Set CheckImage_ = eyes_.CheckImageAtUrl(imageUrl, tag, replaceLast)
	    Else
			Capture_ Object
		    Set CheckImage_ = eyes_.CheckImageFile(imageFile_, tag, replaceLast)
	    End If
	End Function

	Private Function CaptureRemote_(object)
		Dim imageKey, imageUrl
		If topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_PM_DEVICE Then
			' Capture image and store it in the cloud repository in a device specific key
			imageKey = "PUBLIC:/HPD/applitools_" & Object.GetTOProperty("device_id") & ".jpg"
			topLevelObject_.Screenshot "key=" & imageKey

			' Get the remote image URL.
			imageUrl = "https://" & account_.ServerUrl & "/services/repositories/media/" & imageKey & "?operation=download&user=" & account_.User & "&password=" & account_.Password
			eyes_.Log "CaptureRemote_() => " & imageUrl
			CaptureRemote_ = imageUrl
		Else
			eyes_.Throw "Remote catpure is not supported for input object: " & Object.ToString()    
		End If
	End Function

	Private Sub Capture_(object)
		If topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_MC_DEVICE Then
			Object.CaptureBitmap imageFile_, True
		ElseIf topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_PM_DEVICE Then
			utils_.DownloadFile CaptureRemote_(Of Object), imageFile_, True
		ElseIf topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_BROWSER And IsBrowserObject_(Of Object)() Then
			GetBrowserPage_(Of Object).CaptureBitmap imageFile_, True
		Else
			Object.CaptureBitmap imageFile_, True
		End If

		eyes_.Log "Object image captured"
	End Sub

	Private Sub SetAppEnvironment_()
		Dim hostOS, hostApp, osName, osVer, appVer

		' Infer host OS
		hostOS = hostOS_
		If IsNull(hostOS) Then
			If topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_MC_DEVICE Then
				osName = topLevelObject_.GetROProperty("model") & " " & topLevelObject_.GetROProperty("ostype")
				osVer = MajorMinor_(topLevelObject_.GetROProperty("osversion"))
				hostOS = osName & " " & osVer
			ElseIf topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_PM_DEVICE Then
				' Get device model and os
				osName = topLevelObject_.GetROProperty("model") & " " & topLevelObject_.GetROProperty("os")
				osVer = MajorMinor_(topLevelObject_.GetROProperty("os_version"))
				hostOS = osName & " " & osVer
			Else
				' Get Local OS name
				osName = Environment("OS")
				If InStr(osName, "Windows") > 0 Then
					osName = "Windows"
				End If

				' Get Local OS version
				osVer = MajorMinor_(Environment("OSVersion"))
				hostOS = osName & " " & osVer
			End If
		End If

		hostApp = hostApp_
		If IsNull(hostApp) Then
			If topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_WINDOW Then
				hostApp = utils_.GetProcessName(topLevelObject_.GetROProperty("process id"))
			ElseIf topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_BROWSER Then
				appVer = topLevelObject_.GetROProperty("version")
				hostApp = utils_.GetBrowserName(appVer)
			End If
		End If
		If IsNull(hostOS) Then
    		Set hostOS = Nothing
    	End If
		If IsNull(hostApp) Then
    		Set hostApp = Nothing
    	End If
		eyes_.SetAppEnvironment hostOS, hostApp
	End Sub

	Private Function MajorMinor_(version)
		Dim parts

		parts = Split(version, ".")
		If UBound(parts) > 1 Then
			version = parts(0) & "." & parts(1)
		End If

		MajorMinor_ = version
	End Function

	Private Function TryGetEyesPath_()
		Dim path
		On Error Resume Next
		path = Environment.Value("EYES_PATH")
		If IsEmpty(path) Then
			Exit Function
		End If
		If Right(path, 1) <> "\" Then
			path = path & "\"
		End If
		TryGetEyesPath_ = path

	End Function

	Private Sub SetTopLevelObjectSize_()
		If width_ <= 0 Or height_ <= 0 Then
			Exit Sub
		End If

		If topLevelObjectType_ = TOP_LEVEL_OBJECT_TYPE_BROWSER Then
			SetBrowserSize_ topLevelObject_, width_, height_
			width_ = -1
			height_ = -1
		End If

	End Sub

	Private Function NewSize_(width, height)
	    Set NewSize_ = DotNetFactory.CreateInstance("System.Drawing.Size", Null, width, height)
    End Function

	Private Function NewSdkObj_(fullName)
	    Set NewSdkObj_ = DotNetFactory.CreateInstance(fullName, eyesPath_ & "Eyes.Sdk.Core.DotNet.dll")
    End Function

	Function IsBrowserObject_(obj)
		If obj Is Nothing Then
			IsBrowserObject_ = False
			Exit Function
		End If

		IsBrowserObject_ = IsOfType_(obj, "Browser")
	End Function

	Private Function IsOfType_(object, typeStr)
		IsOfType_ = StringContains_(TypeOf_(Of Object), typeStr)
	End Function

	Private Function TypeOf_(object)
		TypeOf_ = Object.GetRoProperty("micclass")
	End Function
	' === SetBrowserSize ===

	Private Sub SetBrowserSize_(browser, width, height)
		Dim hInner, wInner, hOuter, wOuter, hTo, wTo
		Dim wndw, hwnd, size_made_good, interval, full_retries, wait_retries, version
		Dim viewSize
		Dim children :  Set children = browser.ChildObjects()

		interval = 1 'seconds
		full_retries = 2

		browser.Restore()

		Do
			hOuter = browser.GetROProperty("height")
			wOuter = browser.GetROProperty("width")
			hInner = children(0).GetROProperty("height")
			wInner = children(0).GetROProperty("width")

			wTo = wOuter - wInner + width
			hTo = hOuter - hInner + height

			size_made_good = (height = hInner And width = wInner)
			If Not size_made_good Then
				browser.Resize wTo, hTo

				' Wait for stabilization
				wait_retries = 3
				Do
					hInner = children(0).GetROProperty("height")
					wInner = children(0).GetROProperty("width")
					size_made_good = (height = hInner And width = wInner)
					wait interval
					wait_retries = wait_retries - 1
				Loop Until (wait_retries = 0) Or (size_made_good)
			End If

			full_retries = full_retries - 1
			wait interval
		Loop Until (full_retries = 0) Or (size_made_good)

		' Verify result.

		Capture_ browser
		
		Set viewSize = utils_.GetImageSize(imageFile_)
		
		hInner = CInt(viewSize.height)
		wInner = CInt(viewSize.width)
		If (height <> hInner Or width <> wInner) Then
			eyes_.Throw "Failed to set viewport size! Expected: " + CStr(width) + "x" + CStr(height) + " Actual: " + CStr(wInner) + "x" + CStr(hInner)

		End If
	End Sub


	Private Function GetRootHwnd_(hwnd)
		Const GA_ROOT = 2
		GetRootHwnd_ = Extern.GetAncestor(hwnd, GA_ROOT)
	End Function

	Private Function GetInnerDim_(browser, dimension)
		Dim version : version = browser.GetROProperty("version")
		If (StringContains_(version, "Chrome")) Then
			Dim childHwnd : childHwnd = GetChildHwnd_(browser)
			Dim rootHwnd : rootHwnd = GetRootHwnd_(childHwnd)
			GetInnerDim_ = GetChromeLegacyWinObj_(rootHwnd).GetROProperty(dimension)
		ElseIf (StringContains_(version, "internet explorer 8")) Then
			childHwnd = GetChildHwnd_(browser)
			GetInnerDim_ = Window("hwnd:=" & childHwnd).GetROProperty(dimension)
		Else
			GetInnerDim_ = browser.GetROProperty(dimension)
		End If
	End Function

	Private Function GetChildHwnd_(browser)
		Dim children :  Set children = browser.ChildObjects()
		Dim roProps :  set roProps = browser.GetAllROProperties()
		Dim hwnd, i
		If children.count = 0 Then
			eyes_.Throw "Browser has no child objects!"
		End If

		For i = 0 To children.count - 1
			hwnd = children(i).GetRoProperty("HWND")
			If hwnd <> 0 Then
				GetChildHwnd_ = hwnd
				Exit Function
			End If
		Next

		hwnd = browser.GetRoProperty("TOP_LEVEL_HWND")
		If hwnd <> 0 Then
			GetChildHwnd_ = hwnd
			Exit Function
		End If
		eyes_.Throw "Browser has no child windows!"
	End Function

	Private Function StringContains_(str1, str2)
		StringContains_ = (InStr(str1, str2) > 0)
	End Function

	Private Function GetChromeLegacyWinObj_(mainHwnd)
		Dim winObj :  Set winObj = Window("hwnd:=" & mainHwnd)
		Dim children :  Set children = winObj.ChildObjects()
		Dim i

		If children.count = 0 Then
			eyes_.Throw "No child objects found!"
		End If

		For i = 0 To children.count - 1 Step 1
			Dim child :  set child = children(i)
			If child.GetRoProperty("title") = "Chrome Legacy Window" Then
				Set GetChromeLegacyWinObj_ = child
				Exit Function
			End If
		Next
		eyes_.Throw "Chrome Legacy Window not found!"
	End Function

	Public Function UFTVersionInRegistry()
		Dim WSHShell, strValue, major, minor, build
		On Error Resume Next
		Set WSHShell = CreateObject("WScript.Shell")
		major = WSHShell.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Mercury Interactive\QuickTest Professional\CurrentVersion\Major")
		minor = WSHShell.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Mercury Interactive\QuickTest Professional\CurrentVersion\Minor")
		build = WSHShell.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Mercury Interactive\QuickTest Professional\CurrentVersion\build")

		If err.number <> 0 Then
			UFTVersionInRegistry = "unknown"
		Else
			UFTVersionInRegistry = major&"."&minor&"."&build
		End If
		
		set WSHShell = nothing
	End Function

End Class

Class MobileCloudAccount_
	Public ServerUrl
	Public User
	Public Password
End Class

Class EyesReport_
	Public TestName
	Public AppName
	Public Url
	Public IsPassed
	Public IsNew
	Public IsRunning
	Public Steps
	Public Matches
End Class